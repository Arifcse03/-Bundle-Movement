package mnj.mfg.model.services;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import mnj.mfg.model.lov.RecBundleVOImpl;
import mnj.mfg.model.lov.ThirdPartyBundleVOImpl;
import mnj.mfg.model.lov.operatingUnitsVOImpl;
import mnj.mfg.model.services.common.AppModule;


import mnj.mfg.model.views.MnjMfgCutissuanceSzlineViewImpl;
import mnj.mfg.model.views.MnjMfgCutissuanceViewImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes; 
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 26 16:44:55 PKT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }


    /**
     * Container's getter for SaleOrdersLov1.
     * @return SaleOrdersLov1
     */
    public ViewObjectImpl getSaleOrdersLov1() {
        return (ViewObjectImpl)findViewObject("SaleOrdersLov1");
    }


    /**
     * Container's getter for bundleVO1.
     * @return bundleVO1
     */
    public ViewObjectImpl getbundleVO1() {
        return (ViewObjectImpl)findViewObject("bundleVO1");
    }
    
//    public void populateBundles() {
//
//
//        ViewObject populatevo = getbundleVO1(); 
//       // populatevo.executeQuery();       
//    
//        Row[] r = populatevo.getAllRowsInRange();
//        System.out.println("Drop ------->"+r.length);
//        for (Row row :r){
//            
//            if (row.getAttribute("MultiSelect") != null && row.getAttribute("MultiSelect").equals("Y")){    
//                populateLinesTest(row);
//            }
//        }
//        
//
//    }
    
    /////////////////////////////
    public void populateBundles() {


        ViewObject populatevo = getbundleVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("Flag") != null &&
                row.getAttribute("Flag").equals("Y")) {
                System.out.println("Flag --->" + row.getAttribute("Flag"));
                populateLinesTest(row);
            }
        }
    }
    ////////////////////////////
    
    public void populateLinesTest(Row poprow) {
        System.out.println("populateLinesTest ------->");

    
        Row linerow = createLines();            
        linerow.setAttribute("BandelNo", getPopulateValue(poprow, "BundleNo"));
        linerow.setAttribute("ShadeId", getPopulateValue(poprow, "Shade"));
        linerow.setAttribute("SizBndId", getPopulateValue(poprow, "SizeValue"));
        linerow.setAttribute("SrqNumberFrm", getPopulateValue(poprow, "FromPieceNo"));
        linerow.setAttribute("SrqNumberTo", getPopulateValue(poprow, "ToPieceNo"));
        linerow.setAttribute("IssQuantity", getPopulateValue(poprow, "TotalQty"));
        
      


    } //end of populateLines
    
    

    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }
    
    

    public Row createLines() {

        ViewObject vo = getMnjMfgCutissuanceSzlineView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);       
        return row;
    } //end of createHeader
    
    
    public void setPopUpWhereClause(){
        System.out.println("setPopUpWhereClause ------->");
    
    ViewObject vo = getLineVO1() ;    
    //Object stn = vo.getCurrentRow().getAttribute("Obno");
    Object stn = vo.getCurrentRow().getAttribute("Attribute1");
    
    ViewObject voh = getMnjMfgCutissuanceView1() ;
    Object docNo   = voh.getCurrentRow().getAttribute("RecDocNo");
    
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String orgId  =(String)sessionScope.get("orgId");
    
    if (docNo == null)
    {
    ViewObject popVo = getbundleVO1();    
   // popVo.setWhereClause("STN_NO = '"+stn+"'");
        popVo.setWhereClause("CUT_NO = '"+stn+"'"+" AND ORG_ID = '"+orgId+"'"  );
    popVo.executeQuery();
        System.out.println("setPopUpWhereClause ------->"+stn);
    }
        
    }


    /**
     * Container's getter for MnjMfgCutissuanceView1.
     * @return MnjMfgCutissuanceView1
     */
    public MnjMfgCutissuanceViewImpl getMnjMfgCutissuanceView1() {
        return (MnjMfgCutissuanceViewImpl)findViewObject("MnjMfgCutissuanceView1");
    }

    /**
     * Container's getter for LineVO1.
     * @return LineVO1
     */
    public ViewObjectImpl getLineVO1() {
        return (ViewObjectImpl)findViewObject("LineVO1");
    }

    /**
     * Container's getter for HeaderLineVL1.
     * @return HeaderLineVL1
     */
    public ViewLinkImpl getHeaderLineVL1() {
        return (ViewLinkImpl)findViewLink("HeaderLineVL1");
    }

    /**
     * Container's getter for MnjMfgCutissuanceSzlineView1.
     * @return MnjMfgCutissuanceSzlineView1
     */
    public MnjMfgCutissuanceSzlineViewImpl getMnjMfgCutissuanceSzlineView1() {
        return (MnjMfgCutissuanceSzlineViewImpl)findViewObject("MnjMfgCutissuanceSzlineView1");
    }

    /**
     * Container's getter for LineDetailVL1.
     * @return LineDetailVL1
     */
    public ViewLinkImpl getLineDetailVL1() {
        return (ViewLinkImpl)findViewLink("LineDetailVL1");
    }
    
    public void selectAllLines(String flag) {

        System.out.println("ENTER AM select all line ---->");
        ViewObject populatevo = getbundleVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("Flag", flag);
            System.out.println("Get select ---->" + row.getAttribute("Flag"));

        }
    }
    
    public void selectAllPopupLines(String flag) {

        System.out.println("ENTER AM select all line ---->");
        ViewObject populatevo = getRecBundleVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("Flag", flag);
            System.out.println("Get select ---->" + row.getAttribute("Flag"));

        }
    }
    

    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {
        if (userId != null) {
           //String flag = getFlagValue(userId, respId);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            //userSession.setAttribute("Flag", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("unitName", getUnitName(orgId));
        }
    }


    public String getUnitName (String orgId){
        
        ViewObject vo = getoperatingUnitsVO1();
        vo.setWhereClause("ORGANIZATION_ID = "+orgId);
        vo.executeQuery();
        String name = null;
        vo.first();
        
        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return name ;
            
    }


    /**
     * Container's getter for operatingUnitsVO1.
     * @return operatingUnitsVO1
     */
    public operatingUnitsVOImpl getoperatingUnitsVO1() {
        return (operatingUnitsVOImpl)findViewObject("operatingUnitsVO1");
    }

    /**
     * Container's getter for RecBundleVO1.
     * @return RecBundleVO1
     */
    public RecBundleVOImpl getRecBundleVO1() {
        return (RecBundleVOImpl)findViewObject("RecBundleVO1");
    }
    
    
    public void setPopUpWhereClauseRec(){
        System.out.println("setPopUpWhereClauseRec ------->");
    
    ViewObject vo = getLineVO1() ;    
    //Object stn = vo.getCurrentRow().getAttribute("Obno");
    Object stn = vo.getCurrentRow().getAttribute("Attribute1");
    
    ViewObject voh = getMnjMfgCutissuanceView1() ;
    Object docNo   = voh.getCurrentRow().getAttribute("RecDocNo");
    
    
    ViewObject popVo = getRecBundleVO1();    
    // popVo.setWhereClause("STN_NO = '"+stn+"'");
        popVo.setWhereClause("CUT_NO = '"+stn+"'"+" AND ISSUE_DOC = '"+docNo+"'"  );
    popVo.executeQuery();
        System.out.println("setPopUpWhereClauseRec stn ------->"+stn);
        System.out.println("setPopUpWhereClauseRec docNo ------->"+docNo);
        
    }
    
    public void populateBundlesRec() {


        ViewObject populatevo = getRecBundleVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {
            System.out.println("Flag Check--->" + row.getAttribute("Flag"));
            if (row.getAttribute("Flag") != null &&
                row.getAttribute("Flag").equals("true")) {
                System.out.println("Flag --->" + row.getAttribute("Flag"));
                populateLinesTestRec(row);
            }
        }
    }
    ////////////////////////////
    
    public void populateLinesTestRec(Row poprow) {
        System.out.println("populateLinesTest ------->");

    
        Row linerow = createLines();            
        linerow.setAttribute("BandelNo", getPopulateValue(poprow, "BundleNo"));
        linerow.setAttribute("ShadeId", getPopulateValue(poprow, "Shade"));
        linerow.setAttribute("SizBndId", getPopulateValue(poprow, "SizeValue"));
        linerow.setAttribute("SrqNumberFrm", getPopulateValue(poprow, "FromPieceNo"));
        linerow.setAttribute("SrqNumberTo", getPopulateValue(poprow, "ToPieceNo"));
        linerow.setAttribute("IssQuantity", getPopulateValue(poprow, "TotalQty"));
        
      


    } //end of populateLines


    /**
     * Container's getter for ThirdPartyBundleVO1.
     * @return ThirdPartyBundleVO1
     */
    public ThirdPartyBundleVOImpl getThirdPartyBundleVO1() {
        return (ThirdPartyBundleVOImpl)findViewObject("ThirdPartyBundleVO1");
    }
    
    public void setPopUpWhereClauseThirdParty(){
        System.out.println("setPopUpWhereClauseRec ------->");
    
    ViewObject vo = getLineVO1() ;    
    //Object stn = vo.getCurrentRow().getAttribute("Obno");
    Object stn = vo.getCurrentRow().getAttribute("Attribute1");
    
    ViewObject voh = getMnjMfgCutissuanceView1() ;
    Object docNo   = voh.getCurrentRow().getAttribute("RecDocNo");
    
    
    ViewObject popVo = getThirdPartyBundleVO1();    
    // popVo.setWhereClause("STN_NO = '"+stn+"'");
        popVo.setWhereClause("CUT_NO = '"+stn+"'"+" AND CUTISSUE_NO = '"+docNo+"'"  );
    popVo.executeQuery();
        System.out.println("setPopUpWhereClauseRec stn ------->"+stn);
        System.out.println("setPopUpWhereClauseRec docNo ------->"+docNo);
        
    }
    
    public void populateBundlesThirdParty() {


        ViewObject populatevo = getThirdPartyBundleVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("Flag") != null &&
                row.getAttribute("Flag").equals("true")) {
                System.out.println("Flag --->" + row.getAttribute("Flag"));
                populateLinesTestThirdParty(row);
            }
        }
    }
    ////////////////////////////
    
    public void populateLinesTestThirdParty(Row poprow) {
        System.out.println("populateLinesTest ------->");

    
        Row linerow = createLines();            
        linerow.setAttribute("BandelNo", getPopulateValue(poprow, "BundleNo"));
        linerow.setAttribute("ShadeId", getPopulateValue(poprow, "Shade"));
        linerow.setAttribute("SizBndId", getPopulateValue(poprow, "SizeValue"));
        linerow.setAttribute("SrqNumberFrm", getPopulateValue(poprow, "FromPieceNo"));
        linerow.setAttribute("SrqNumberTo", getPopulateValue(poprow, "ToPieceNo"));
        linerow.setAttribute("IssQuantity", getPopulateValue(poprow, "TotalQty"));
        
      


    } //end of populateLines
   
   
    public String CreateRequisition(){
            
          ViewObject vo = getMnjMfgCutissuanceView1();
          String HeaderId = vo.getCurrentRow().getAttribute("CutissueId").toString();
          System.out.println("Header Id -->" + HeaderId);
          
          Map sessionScope = ADFContext.getCurrent().getSessionScope();   
          String UserId    =(String)sessionScope.get("userId");
          String RespId    =(String)sessionScope.get("respId");
          
          System.out.println("HeaderId......"+HeaderId);
          System.out.println("UserId........"+UserId);
          System.out.println("RespId........"+RespId);
          
//          String status =null;
//          String stmt = 
//              "BEGIN  MNJ_CREATE_CUTISU_REQUISITION(:1,:2,:3); end;";
//
//          CallableStatement cs =
//              getDBTransaction().createCallableStatement(stmt, 1);
//          try 
//          {
//              cs.registerOutParameter(4, OracleTypes.VARCHAR);
//              cs.setInt(1, Integer.parseInt(HeaderId));
//              cs.setInt(2, Integer.parseInt(UserId));
//              cs.setInt(3, Integer.parseInt(RespId));
//              cs.execute();
//              cs.close();
//
//          } catch (Exception e) {
//              status = e.getMessage();
//          }
//          
          String RequestStatus = null;
          RequestStatus =
                  (String)callStoredFunction(OracleTypes.VARCHAR, "MNJ_CREATE_CUTISU_REQUISITION(?, ?, ?)",
                                             new Object[] { HeaderId, UserId,
                                                            RespId });
          

         System.out.println(HeaderId+"status--->"+RequestStatus);
         
        return RequestStatus;
                
      } 

    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                        Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st =
    getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }
    
}//end of class
